{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"api/credits/","text":"Credits express reflect-metadata cors helmet jsonpath lodash morgan body-parser cookie-parser cors fs @types","title":"Credits"},{"location":"api/credits/#credits","text":"express reflect-metadata cors helmet jsonpath lodash morgan body-parser cookie-parser cors fs @types","title":"Credits"},{"location":"api/overview/","text":"REST Api with express.js Overview Quick Start Create new API Project 1 mio new api api-name Example 1 mio new api DemoApi Decorators Routable 1 @Routable( route-path , verbe ) example 1 2 3 4 5 6 7 8 import { Routable } from mission.api ; @Routable ( /health , GET ) export class UserController { public static async getUsers ( req : Request , res : Response , next : NextFunction ) : Promise boolean { return { ... }; } } Controller Warning All methods should be static async . Both access specifiers ( public / private ) would be exposed as service. Example: 1 2 3 4 5 6 @Routable ( /user ) export class UserRegistrationController { public static async getUsers ( req : Request , res : Response , next : NextFunction ) : Promise any { ... } } Built-in Controllers Health Check Controller 1 2 3 4 5 6 7 8 9 @Routable ( /health , GET ) export class HealthService { public static async liveness ( req : Request , res : Response , next : NextFunction ) : Promise boolean { return true ; } public static async readyness ( req : Request , res : Response , next : NextFunction ) : Promise boolean { return true ; } } To Check the liveness of the appliation 1 http://localhost:3000/health/liveness To Check the readyness of the application 1 http://localhost:3000/health/readyness Note Readyness api need to be override to check the readyness of the other resources like Sql / NoSql database, redis cache, etc. Facade Controller Configuration Web Server Configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 interface WebServerConfig { apiPort : number ; isHttpsEnabled : boolean ; httpsCertificatepath : string ; httpsKeypath : string ; corsOptions : CorsOptions ; } interface CorsOptions { origin? : boolean | string | RegExp | ( string | RegExp )[] | CustomOrigin ; methods? : string | string []; allowedHeaders? : string | string []; exposedHeaders? : string | string []; credentials? : boolean ; maxAge? : number ; preflightContinue? : boolean ; optionsSuccessStatus? : number ; } Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import { config , DotenvResult } from dotenv ; import { StaticFileConfig , WebServerConfig } from mission.api ; const env : DotenvResult = config (); if ( env . error ) { throw env . error ; } export const WebConfig : WebServerConfig = { apiPort : Number ( process . env . WEB_PORT ), corsOptions : { allowedHeaders : ( process . env . CORS_ALLOWED_HEADERS || ). split ( , ), credentials : Boolean ( process . env . CORS_CREDENTIALS ), exposedHeaders : ( process . env . CORS_EXPOSED_HEADERS || ). split ( , ), maxAge : Number ( process . env . CORS_MAX_AGE ), methods : ( process . env . CORS_METHODS || ). split ( , ), origin : process.env.CORS_ORIGIN , }, httpsCertificatepath : process.env.WEB_SSL_CERTIFICATE_PATH || , httpsKeypath : process.env.WEB_SSL_KEY_PATH || , isHttpsEnabled : !! process . env . WEB_SSL_CERTIFICATE_PATH , }; export const FileConfig : StaticFileConfig = { dotfiles : ignore , etag : false , extensions : [ htm , html ], index : [ index.html , index.htm ], maxAge : process.env.STATIC_FILE_MAX_AGE || 1d , redirect : false , setHeaders : ( res : any , path : string , stat : string ) = { res . set ( x-timestamp , Date . now (). toString ()); }, }; Finally can create a WebServer instance with this config as follows. 1 2 3 4 5 6 7 8 9 10 11 12 import { ApplicationRoutes , GetRouter , Router , WebServer } from mission.api ; import { WebConfig } from ./config ; const server = new WebServer ( WebConfig , console ); import ./controller ; const route : Router = GetRouter (); route . use ( ApplicationRoutes ); server . init (); server . addApiRouting ( / , route ); server . start (); Logger Configuration Interface 1 2 3 4 5 6 interface LoggerInstance { log : Function ; info : Function ; warn : Function ; error : Function ; } Morgan Logger configuration: Set the following evironment variable. 1 process.env.MORGAN = dev Accepted Values are: 1. combined 2. common 3. dev (default) 4. short 5. tiny More Reference Util Wrap 1 Wrap (( req : Request , res : Response , next : NextFunction ) = {}); ErrorWrap","title":"Create REST Api Only"},{"location":"api/overview/#rest-api-with-expressjs","text":"","title":"REST Api with express.js"},{"location":"api/overview/#overview","text":"","title":"Overview"},{"location":"api/overview/#quick-start","text":"","title":"Quick Start"},{"location":"api/overview/#create-new-api-project","text":"1 mio new api api-name Example 1 mio new api DemoApi","title":"Create new API Project"},{"location":"api/overview/#decorators","text":"","title":"Decorators"},{"location":"api/overview/#routable","text":"1 @Routable( route-path , verbe ) example 1 2 3 4 5 6 7 8 import { Routable } from mission.api ; @Routable ( /health , GET ) export class UserController { public static async getUsers ( req : Request , res : Response , next : NextFunction ) : Promise boolean { return { ... }; } }","title":"Routable"},{"location":"api/overview/#controller","text":"Warning All methods should be static async . Both access specifiers ( public / private ) would be exposed as service. Example: 1 2 3 4 5 6 @Routable ( /user ) export class UserRegistrationController { public static async getUsers ( req : Request , res : Response , next : NextFunction ) : Promise any { ... } }","title":"Controller"},{"location":"api/overview/#built-in-controllers","text":"","title":"Built-in Controllers"},{"location":"api/overview/#health-check-controller","text":"1 2 3 4 5 6 7 8 9 @Routable ( /health , GET ) export class HealthService { public static async liveness ( req : Request , res : Response , next : NextFunction ) : Promise boolean { return true ; } public static async readyness ( req : Request , res : Response , next : NextFunction ) : Promise boolean { return true ; } } To Check the liveness of the appliation 1 http://localhost:3000/health/liveness To Check the readyness of the application 1 http://localhost:3000/health/readyness Note Readyness api need to be override to check the readyness of the other resources like Sql / NoSql database, redis cache, etc.","title":"Health Check Controller"},{"location":"api/overview/#facade-controller","text":"","title":"Facade Controller"},{"location":"api/overview/#configuration","text":"","title":"Configuration"},{"location":"api/overview/#web-server-configuration","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 interface WebServerConfig { apiPort : number ; isHttpsEnabled : boolean ; httpsCertificatepath : string ; httpsKeypath : string ; corsOptions : CorsOptions ; } interface CorsOptions { origin? : boolean | string | RegExp | ( string | RegExp )[] | CustomOrigin ; methods? : string | string []; allowedHeaders? : string | string []; exposedHeaders? : string | string []; credentials? : boolean ; maxAge? : number ; preflightContinue? : boolean ; optionsSuccessStatus? : number ; } Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import { config , DotenvResult } from dotenv ; import { StaticFileConfig , WebServerConfig } from mission.api ; const env : DotenvResult = config (); if ( env . error ) { throw env . error ; } export const WebConfig : WebServerConfig = { apiPort : Number ( process . env . WEB_PORT ), corsOptions : { allowedHeaders : ( process . env . CORS_ALLOWED_HEADERS || ). split ( , ), credentials : Boolean ( process . env . CORS_CREDENTIALS ), exposedHeaders : ( process . env . CORS_EXPOSED_HEADERS || ). split ( , ), maxAge : Number ( process . env . CORS_MAX_AGE ), methods : ( process . env . CORS_METHODS || ). split ( , ), origin : process.env.CORS_ORIGIN , }, httpsCertificatepath : process.env.WEB_SSL_CERTIFICATE_PATH || , httpsKeypath : process.env.WEB_SSL_KEY_PATH || , isHttpsEnabled : !! process . env . WEB_SSL_CERTIFICATE_PATH , }; export const FileConfig : StaticFileConfig = { dotfiles : ignore , etag : false , extensions : [ htm , html ], index : [ index.html , index.htm ], maxAge : process.env.STATIC_FILE_MAX_AGE || 1d , redirect : false , setHeaders : ( res : any , path : string , stat : string ) = { res . set ( x-timestamp , Date . now (). toString ()); }, }; Finally can create a WebServer instance with this config as follows. 1 2 3 4 5 6 7 8 9 10 11 12 import { ApplicationRoutes , GetRouter , Router , WebServer } from mission.api ; import { WebConfig } from ./config ; const server = new WebServer ( WebConfig , console ); import ./controller ; const route : Router = GetRouter (); route . use ( ApplicationRoutes ); server . init (); server . addApiRouting ( / , route ); server . start ();","title":"Web Server Configuration"},{"location":"api/overview/#logger-configuration-interface","text":"1 2 3 4 5 6 interface LoggerInstance { log : Function ; info : Function ; warn : Function ; error : Function ; } Morgan Logger configuration: Set the following evironment variable. 1 process.env.MORGAN = dev Accepted Values are: 1. combined 2. common 3. dev (default) 4. short 5. tiny More Reference","title":"Logger Configuration Interface"},{"location":"api/overview/#util","text":"","title":"Util"},{"location":"api/overview/#wrap","text":"1 Wrap (( req : Request , res : Response , next : NextFunction ) = {});","title":"Wrap"},{"location":"api/overview/#errorwrap","text":"","title":"ErrorWrap"},{"location":"cli/cheat-sheet/","text":"Cheat Sheet mio new S.No Template Name Command Description 1 api mio new api [app-name] Create mission.api 2 core mio new core [app-name] Create mission.core 3 scheduler mio new scheduler [app-name] Create mission.scheduler 4 mongodb mio new mongodb [app-name] Create mission.mongodb 5 tsc mio new tsc [app-name] Create typescript quick start project 6 client mio new client [app-name] Create Angular seed project (inprogress) mio init Initialize the mission project. It will generate mission.json file. mio add mio list mio generage mio link mio lint mio build mio serve mio docker mio version mio help","title":"Cheat Sheet"},{"location":"cli/cheat-sheet/#cheat-sheet","text":"mio new S.No Template Name Command Description 1 api mio new api [app-name] Create mission.api 2 core mio new core [app-name] Create mission.core 3 scheduler mio new scheduler [app-name] Create mission.scheduler 4 mongodb mio new mongodb [app-name] Create mission.mongodb 5 tsc mio new tsc [app-name] Create typescript quick start project 6 client mio new client [app-name] Create Angular seed project (inprogress) mio init Initialize the mission project. It will generate mission.json file. mio add mio list mio generage mio link mio lint mio build mio serve mio docker mio version mio help","title":"Cheat Sheet"},{"location":"cli/commands/","text":"Mission CLI Commands (mio) Install Mission Command Line Interface (CLI) 1 npm i mission.cli -g Demo mio new S.No Template Name Command Description 1 api mio new api [app-name] Create mission.api 2 core mio new core [app-name] Create mission.core 3 scheduler mio new scheduler [app-name] Create mission.scheduler 4 mongodb mio new mongodb [app-name] Create mission.mongodb 5 tsc mio new tsc [app-name] Create typescript quick start project 6 client mio new client [app-name] Create Angular seed project (inprogress) Demo mio init Initialize the mission project. It will update or create mission.json file. Demo mio add Add new submodule by CLI 1 mio add service petstore Demo mio list mio generage mio link (Deprecated in 1.0.0) npm install command will remove the link between the submodules and host modules. So we need to run mio link every exection of npm install or npm i` command. Warning `This command is deprecated in v1.0.0. Not required to run mio link anymore from v1.0.0. mio lint mio build mio serve mio docker mio version View the mission cli version number Demo mio help","title":"Commands"},{"location":"cli/commands/#mission-cli-commands-mio","text":"","title":"Mission CLI Commands (mio)"},{"location":"cli/commands/#install-mission-command-line-interface-cli","text":"1 npm i mission.cli -g","title":"Install Mission Command Line Interface (CLI)"},{"location":"cli/commands/#demo","text":"","title":"Demo"},{"location":"cli/commands/#mio-new","text":"S.No Template Name Command Description 1 api mio new api [app-name] Create mission.api 2 core mio new core [app-name] Create mission.core 3 scheduler mio new scheduler [app-name] Create mission.scheduler 4 mongodb mio new mongodb [app-name] Create mission.mongodb 5 tsc mio new tsc [app-name] Create typescript quick start project 6 client mio new client [app-name] Create Angular seed project (inprogress)","title":"mio new"},{"location":"cli/commands/#demo_1","text":"","title":"Demo"},{"location":"cli/commands/#mio-init","text":"Initialize the mission project. It will update or create mission.json file.","title":"mio init"},{"location":"cli/commands/#demo_2","text":"","title":"Demo"},{"location":"cli/commands/#mio-add","text":"","title":"mio add"},{"location":"cli/commands/#add-new-submodule-by-cli","text":"1 mio add service petstore","title":"Add new submodule by CLI"},{"location":"cli/commands/#demo_3","text":"","title":"Demo"},{"location":"cli/commands/#mio-list","text":"","title":"mio list"},{"location":"cli/commands/#mio-generage","text":"","title":"mio generage"},{"location":"cli/commands/#mio-link-deprecated-in-100","text":"npm install command will remove the link between the submodules and host modules. So we need to run mio link every exection of npm install or npm i` command. Warning `This command is deprecated in v1.0.0. Not required to run mio link anymore from v1.0.0.","title":"mio link (Deprecated in 1.0.0)"},{"location":"cli/commands/#mio-lint","text":"","title":"mio lint"},{"location":"cli/commands/#mio-build","text":"","title":"mio build"},{"location":"cli/commands/#mio-serve","text":"","title":"mio serve"},{"location":"cli/commands/#mio-docker","text":"","title":"mio docker"},{"location":"cli/commands/#mio-version","text":"View the mission cli version number","title":"mio version"},{"location":"cli/commands/#demo_4","text":"","title":"Demo"},{"location":"cli/commands/#mio-help","text":"","title":"mio help"},{"location":"cli/credits/","text":"Credits command-line-args command-line-usage express express-session body-parser chalk clear clui archiver figlet fs inquirer lodash mysql2 openurl path prompt replace-in-file shelljs table touch uglify-es","title":"Credits"},{"location":"cli/credits/#credits","text":"command-line-args command-line-usage express express-session body-parser chalk clear clui archiver figlet fs inquirer lodash mysql2 openurl path prompt replace-in-file shelljs table touch uglify-es","title":"Credits"},{"location":"cli/overview/","text":"Mission.cli Overview How to install Local installation 1 npm i mission.cli Global installation 1 npm i mission.cli -g Commands new Command 1 mio new service-name Example 1 mio new OrderApi init Command 1 mio init","title":"Mission.cli"},{"location":"cli/overview/#missioncli","text":"","title":"Mission.cli"},{"location":"cli/overview/#overview","text":"","title":"Overview"},{"location":"cli/overview/#how-to-install","text":"","title":"How to install"},{"location":"cli/overview/#local-installation","text":"1 npm i mission.cli","title":"Local installation"},{"location":"cli/overview/#global-installation","text":"1 npm i mission.cli -g","title":"Global installation"},{"location":"cli/overview/#commands","text":"","title":"Commands"},{"location":"cli/overview/#new-command","text":"1 mio new service-name Example 1 mio new OrderApi","title":"new Command"},{"location":"cli/overview/#init-command","text":"1 mio init","title":"init Command"},{"location":"common/overview/","text":"","title":"Overview"},{"location":"core/credits/","text":"Credits sequelize multer glob","title":"Credits"},{"location":"core/credits/#credits","text":"sequelize multer glob","title":"Credits"},{"location":"core/overview/","text":"","title":"Overview"},{"location":"development env setup/minikube/","text":"Run Minikube 1 minikube start --container-runtime=cri-o --bootstrapper=kubeadm --cpus=4 --memory=4096 --extra-config= apiserver.Authentication.TokenFile.TokenFile=$(pwd)/user-token.csv","title":"Run Minikube"},{"location":"development env setup/minikube/#run-minikube","text":"1 minikube start --container-runtime=cri-o --bootstrapper=kubeadm --cpus=4 --memory=4096 --extra-config= apiserver.Authentication.TokenFile.TokenFile=$(pwd)/user-token.csv","title":"Run Minikube"},{"location":"helm/","text":"Helm Charts Repository 1 helm repo add mission https://mission-io.github.io/charts/ Search repository 1 helm search pdfmaker For more Helm Command click me","title":"Helm"},{"location":"helm/#helm-charts-repository","text":"1 helm repo add mission https://mission-io.github.io/charts/","title":"Helm Charts Repository"},{"location":"helm/#search-repository","text":"1 helm search pdfmaker","title":"Search repository"},{"location":"helm/#for-more-helm-command","text":"click me","title":"For more Helm Command"},{"location":"home/customers/","text":"Customers Healthmed Technologies","title":"Customers"},{"location":"home/customers/#customers","text":"Healthmed Technologies","title":"Customers"},{"location":"home/features/","text":"Features Cross Platform Speed and Performance Productivity Full Development Story","title":""},{"location":"home/features/#features","text":"","title":"Features"},{"location":"home/features/#cross-platform","text":"","title":"Cross Platform"},{"location":"home/features/#speed-and-performance","text":"","title":"Speed and Performance"},{"location":"home/features/#productivity","text":"","title":"Productivity"},{"location":"home/features/#full-development-story","text":"","title":"Full Development Story"},{"location":"home/get-started/","text":"Get Started 1. Prerequisites Install the Nodejs Install the git install the VSCode Install mysql or posgresql database Install the following npm modules globally typescript tslint rimraf 1 npm i typescript tslint rimraf mission.cli -g 2. Verify the installatioin tsc -v tslint -v node -v git version mio version","title":"Get started"},{"location":"home/get-started/#get-started","text":"","title":"Get Started"},{"location":"home/get-started/#1-prerequisites","text":"Install the Nodejs Install the git install the VSCode Install mysql or posgresql database Install the following npm modules globally typescript tslint rimraf 1 npm i typescript tslint rimraf mission.cli -g","title":"1. Prerequisites"},{"location":"home/get-started/#2-verify-the-installatioin","text":"tsc -v tslint -v node -v git version mio version","title":"2. Verify the installatioin"},{"location":"home/license/","text":"","title":"License"},{"location":"home/partners/","text":"Partners Zerofence","title":"Partners"},{"location":"home/partners/#partners","text":"Zerofence","title":"Partners"},{"location":"home/project-structure/","text":"","title":"Project Structure"},{"location":"home/release-notes/","text":"","title":"Release notes"},{"location":"seed/overview/","text":"","title":"Overview"},{"location":"team/contributors/","text":"Contributors","title":"Contributors"},{"location":"team/contributors/#contributors","text":"","title":"Contributors"},{"location":"team/core-team/","text":"Core Team Natarajan Ganapathi Saravanan K J","title":"Core"},{"location":"team/core-team/#core-team","text":"Natarajan Ganapathi Saravanan K J","title":"Core Team"},{"location":"template/credits/","text":"Credits bwip-js deasync handlebars html-pdf lodash","title":"Credits"},{"location":"template/credits/#credits","text":"bwip-js deasync handlebars html-pdf lodash","title":"Credits"},{"location":"template/overview/","text":"","title":"Docker"}]}